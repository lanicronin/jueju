// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// User defines model for User.
type User struct {
	// Auth0Id Auth0 ID
	Auth0Id string `json:"auth0_id"`

	// CreatedAt Account creation timestamp
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Email User email
	Email string `json:"email"`

	// EmailVerified Email verification status
	EmailVerified *bool `json:"email_verified,omitempty"`

	// Id User ID
	Id openapi_types.UUID `json:"id"`

	// LastLogin Last login timestamp
	LastLogin *time.Time `json:"last_login,omitempty"`

	// Name User name
	Name *string `json:"name,omitempty"`

	// Nickname User nickname
	Nickname *string `json:"nickname,omitempty"`

	// Picture User avatar
	Picture *string `json:"picture,omitempty"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Callback from Auth0
	// (GET /callback)
	Callback(c *fiber.Ctx) error
	// Logs user into the system via Auth0
	// (GET /login)
	Login(c *fiber.Ctx) error
	// Logs out current logged in user session
	// (GET /logout)
	Logout(c *fiber.Ctx) error
	// Get user information
	// (GET /user)
	GetUser(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Callback operation middleware
func (siw *ServerInterfaceWrapper) Callback(c *fiber.Ctx) error {

	return siw.Handler.Callback(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *fiber.Ctx) error {

	return siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *fiber.Ctx) error {

	return siw.Handler.Logout(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	return siw.Handler.GetUser(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/callback", wrapper.Callback)

	router.Get(options.BaseURL+"/login", wrapper.Login)

	router.Get(options.BaseURL+"/logout", wrapper.Logout)

	router.Get(options.BaseURL+"/user", wrapper.GetUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVXU/DNhT9K9bdHkMTygvKG2IVKqompI0nhCrj3CYeie3Z10UI9b9Pvm5LaVOkTXvg",
	"qW7O/Ton1ycfoOzgrEFDAeoPCKrDQfJx5r316eC8dehJIz9WtsH022BQXjvS1kCdgwVjBaysHyRBDdrQ",
	"1RQKoHeH+S+26GFTwIAhyPZsoR28Tw3ktWlhsynA499Re2ygfoJtw13486aAx4AjU8tIXbXUzWnDm4SI",
	"+W+nvQpQHiVhs0xkTvKUstGQ4BhtjSA9YCA5uEMFGkl4kZCx8jhI3Z9WTgxExs4lLdfo9UrjCJ9ZwkXG",
	"VZ4skKQYPou9WNujNKnamCLcnwXZ04hRN2PD9DLQsretNqdlFjKQYOw/SGPkgGcmY2gsRavX79J28Eiq",
	"04qiP5cp15KkH8uLrjm7H0w/B/xr/kdbztrvN3i3N8+bFKfNyp42/7PTQeggqENxH/E+ipuHORTQa4Um",
	"MNEsFdw4qToU00kFBUTfQw0dkQt1Wb69vU0kwxPr23KbG8rF/Hb2+x+zi+mkmnQ09EkJ0tSncofN1uhD",
	"HudyUk2qFGYdGuk01HDFjwpwkjq+oaWSff8i1Wv60yIrmm4wr/C8gRpudwFJneBsGiZTX8nYUzYnQ2j4",
	"KJ3rtxeg/CtY8+lu6fSrxxXU8Ev5aX/l1vvKbHys7pg37XrzawpxGKR/P5hOrLwdBLsKR5T76zFKasHo",
	"j2S0sG0QMd0AbcjyLoX3QDiItZZHDG2k7ygm+OdytJGEit6jYcNqsRHaZOYBA+8w84zbT8soyzsk/vQc",
	"0ZxW1f9GkeuPMHzM7yg7C09b/BB575B2G3QwHcegT/4A9dOJcVole5HxL55Ul2WfsM4Gqq+r66qUTpfr",
	"S9gUxzUevG2iyh+/r4X2Oc+bfwIAAP//OzfmVPwIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
