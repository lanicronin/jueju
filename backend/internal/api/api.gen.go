// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for PoemRequestStatus.
const (
	Completed PoemRequestStatus = "completed"
	Failed    PoemRequestStatus = "failed"
	Pending   PoemRequestStatus = "pending"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// PoemRequest defines model for PoemRequest.
type PoemRequest struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Poem      *string            `json:"poem,omitempty"`
	Prompt    string             `json:"prompt"`
	Status    PoemRequestStatus  `json:"status"`
	UpdatedAt time.Time          `json:"updated_at"`
	UserId    openapi_types.UUID `json:"user_id"`
}

// PoemRequestStatus defines model for PoemRequest.Status.
type PoemRequestStatus string

// PoemRequestInput defines model for PoemRequestInput.
type PoemRequestInput struct {
	Prompt string `json:"prompt"`
}

// User defines model for User.
type User struct {
	// Auth0Id Auth0 ID
	Auth0Id string `json:"auth0_id"`

	// CreatedAt Account creation timestamp
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Email User email
	Email string `json:"email"`

	// EmailVerified Email verification status
	EmailVerified *bool `json:"email_verified,omitempty"`

	// Id User ID
	Id openapi_types.UUID `json:"id"`

	// LastLogin Last login timestamp
	LastLogin *time.Time `json:"last_login,omitempty"`

	// Name User name
	Name *string `json:"name,omitempty"`

	// Nickname User nickname
	Nickname *string `json:"nickname,omitempty"`

	// Picture User avatar
	Picture *string `json:"picture,omitempty"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = Error

// RequestPoemJSONRequestBody defines body for RequestPoem for application/json ContentType.
type RequestPoemJSONRequestBody = PoemRequestInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Callback from Auth0
	// (GET /auth/callback)
	Callback(c *fiber.Ctx) error
	// Logs user into the system via Auth0
	// (GET /auth/login)
	Login(c *fiber.Ctx) error
	// Logs out current logged in user session
	// (GET /logout)
	Logout(c *fiber.Ctx) error
	// Get user's poem requests
	// (GET /poems)
	GetUserPoemRequests(c *fiber.Ctx) error
	// Request a new poem
	// (POST /poems)
	RequestPoem(c *fiber.Ctx) error
	// Get user information
	// (GET /user)
	GetUser(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Callback operation middleware
func (siw *ServerInterfaceWrapper) Callback(c *fiber.Ctx) error {

	return siw.Handler.Callback(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *fiber.Ctx) error {

	return siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.Logout(c)
}

// GetUserPoemRequests operation middleware
func (siw *ServerInterfaceWrapper) GetUserPoemRequests(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.GetUserPoemRequests(c)
}

// RequestPoem operation middleware
func (siw *ServerInterfaceWrapper) RequestPoem(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.RequestPoem(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.GetUser(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/auth/callback", wrapper.Callback)

	router.Get(options.BaseURL+"/auth/login", wrapper.Login)

	router.Get(options.BaseURL+"/logout", wrapper.Logout)

	router.Get(options.BaseURL+"/poems", wrapper.GetUserPoemRequests)

	router.Post(options.BaseURL+"/poems", wrapper.RequestPoem)

	router.Get(options.BaseURL+"/user", wrapper.GetUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWX2/bNhD/KsRtwF5US01fCr1lXVCkC4YgWZ8CI2Cos81GIlnymMAo9N0HkpJi2XTa",
	"bB3aN4m/4/353fHuvoDQndEKFTmov4BFZ7RyGH/OrNX2ajgJB0IrQkXhkxvTSsFJalV+clqFMyc22PHw",
	"9avFFdTwS/mkvUyoK6NW6Pu+gAadsNIEJVAnc2z0AILAcGdyJnwYqw1akslHoZvoWk5VxApYadtxghqk",
	"ojcnUABtDaZfXKOFvoAOnePro4pGeLrqyEq1ji5a/OylxQbqGxgMjuLLvoBLjd0VfvboKOO8RU7Y3PKI",
	"TX42nPAVyS5jsADZzGS9l01OzGjsguAhYHVnKAs54uSjY6h8FwIyqJoAFrFMWiQMxlZcttjAMmPWm+bF",
	"EXmH9vabwtqjO4qMt6fIpjiKXX5nrj15ru8+oSCYJ+pcGZ/J1lHm9twa5HJGPjrM1DD3tKkGBubldxoQ",
	"dv5HjrZ58ezdE0J7RSzKSK1Y4N4R78zue3g2K9hx2R5qDhGwhB27dPuAVq4kZuI5CzhLeGoebErWoOxO",
	"6xa5eir1jP1IyFefQMsd3bZ6LdWhmgvuiEXsX1CjeIdHPItQ7ooU989dG+HcS5aCvD12kz9w4ha++hQz",
	"4SeBF8efe4RTBY91s4zdG4W3krbXoYuP7VrfSwxlHf5CZoYjGGkFh85JrW5J36N6Ms+N/BO3aW5ItdKH",
	"Qf29kY5Jx2iD7IPHD56dXp5DAa0UOAywwcSp4WKD7GRRhb5gW6hhQ2RcXZaPj48LHuGFtutyuOvKi/N3",
	"Z39dn706WVSLDXVtYJgktUHdrrEHtC6583pRLaogpg0qbiTU8CYeFWA4bSIdZSCuFLxt77i4DydrjOkK",
	"7SG+j/MGang3ChTzAf2mOjmk4QobaVEQI81WNk7sBuKwXXHf0o+Z40MlQH2zLMD5ruN2uxNYcLRjsdtF",
	"+cTL9HazpFxE9KWMDDZ+Tjou9NqxMNCYVKRjIbutI+zYg+S79LR6rdOIOkZNgF/KTeqHJqwuP5qgOSXa",
	"ExPeWlSxaa+xYVIlooZukWgJS487ysp7pNAydwa926fopKpeFK+kweBzge+ugP1TP7OWb3N0XEhHTK9i",
	"eL85FmJidvR3npec1Smecr6+z2l9j3TUgNEuw94QQQgG0gRAR7/rZvvdCuRgA+vns4asx/4/Juyb83SY",
	"l2svBDq38u2Msu+WksE040zhYzSRitoPO+NzNQ3/Iy1Rf4aPj6lPpZUhPsGfpWeMxT33bq/xzneRm2Uf",
	"OjHaML8juvcoteAtS/hsZ6jLsg3YRjuq31Zvq5IbWT68hr7Y13FpdeNFWnrniqY7y/6fAAAA//8CaG0b",
	"kQ8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
